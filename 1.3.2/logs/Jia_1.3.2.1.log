# IPython log file

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
port matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import numpy as np
a = np.random.randn(10000)
plt.hist(a)
#[Out]# (array([   16.,   110.,   450.,  1486.,  2628.,  2799.,  1731.,   629.,
#[Out]#          130.,    21.]), array([-3.78172867, -3.03766705, -2.29360544, -1.54954382, -0.8054822 ,
#[Out]#        -0.06142058,  0.68264104,  1.42670266,  2.17076428,  2.9148259 ,
#[Out]#         3.65888752]), <a list of 10 Patch objects>)
plt.savefig('1.3.2.Histogram')
plt.savefig('1.3.2/Histogram')
# Thu, 06 Dec 2018 20:52:35
# 5: the code created a bar graph with data 
# Thu, 06 Dec 2018 20:55:42
# Andrea Jia 1.3.2 IPython Log
# Thu, 06 Dec 2018 20:56:15
5+3
#[Out]# 8
# Thu, 06 Dec 2018 20:58:33
#7b: int/int returns int, int/float returns float 
# Thu, 06 Dec 2018 20:58:40
#8 Assignment:
# Thu, 06 Dec 2018 20:59:30
student_age = 16
# Thu, 06 Dec 2018 21:01:24
7/2
#[Out]# 3
# Thu, 06 Dec 2018 21:01:29
7/2.
#[Out]# 3.5
# Thu, 06 Dec 2018 21:02:26
#7b: int/int returns an integer rounded down, while int/float returns the precise decimal
# Thu, 06 Dec 2018 21:03:26
7*2.
#[Out]# 14.0
# Thu, 06 Dec 2018 21:03:30
7*2
#[Out]# 14
# Thu, 06 Dec 2018 21:03:49
#7a: int*int returns integer, int*float returns decimal 
# Thu, 06 Dec 2018 21:11:07
#testing: 9 Assignment: 
# Thu, 06 Dec 2018 21:11:14
23 ** 43
#[Out]# 35834136918934220777541995677272642015423987712183913488967L
# Thu, 06 Dec 2018 21:17:15
#True: 1.0==1
# Thu, 06 Dec 2018 21:17:28
1.0 == 1
#[Out]# True
# Thu, 06 Dec 2018 21:31:02
%run 1.3.2/Jia_1.3.2.py
# Thu, 06 Dec 2018 21:33:10
def function()
# Thu, 06 Dec 2018 21:33:20
def function()
# Thu, 06 Dec 2018 21:33:45
def function():
    print "Hello"

# Thu, 06 Dec 2018 21:34:39
#11: Editing many lines of code in the code editor allows for higher levels of organization as well as a more complete set of code; running each line of code in the terminal is more interactive and allows the coder to immediately see if he/she has made an error
# Fri, 07 Dec 2018 20:52:28
#12: Scratch and App Inventor use shaped code blocks that have lines of code inside of it acting as a block.
# Fri, 07 Dec 2018 20:55:15
#13: A docstring can be used to explain the details of what the function is and where it can be used. 
# Fri, 07 Dec 2018 21:02:22
#14: Advantages of destroying local variables include making the Python program more organized, so that there are not too many variables that can't be kept track of. 
# Fri, 07 Dec 2018 21:03:19
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:09:04
"""#15: #15: A compiler would be like a translator who listens to all of the foreign person's words before translating, giving the other person a translated version of the wh


"""#15: #15: A compiler would be like a translator who listens to all of the foreign person's words before translating, giving the other person a translated version of the wh
#[Out]# "#15: #15: A compiler would be like a translator who listens to all of the foreign person's words before translating, giving the other person a translated version of the wh\n\n\n"
# Fri, 07 Dec 2018 21:13:51
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:13:58
hyp(3, 4)
# Fri, 07 Dec 2018 21:14:21
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:14:26
hyp(3, 4)
#[Out]# 5.0
# Fri, 07 Dec 2018 21:16:35
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:16:44
mean(1,2,3)
#[Out]# 2.0
# Fri, 07 Dec 2018 21:16:57
mean(6,3,7)
#[Out]# 5.333333333333333
# Fri, 07 Dec 2018 21:17:52
mean(3,4,7)
#[Out]# 4.666666666666667
# Fri, 07 Dec 2018 21:18:30
%run 1.3.2./Jia_1.3.2.py
# Fri, 07 Dec 2018 21:18:48
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:18:57
perimeter(3,4)
#[Out]# 14
# Fri, 07 Dec 2018 21:24:15
#1 Conclusion: I would like a program to open up all the websites I need for my homework beforehand based on a planner so I won't forget anything. 
# Fri, 07 Dec 2018 21:25:25
#2 Conclusion: Native datatypes I learned about in this program include int, float, boolean, and string type datas 
# Fri, 07 Dec 2018 21:25:56
#3 Conclusion: Some differences between the command line of interpretive iPython and the code editor where a file of code is run is that 
# Fri, 07 Dec 2018 21:26:28
#3 continued: every line of code typed is automatically entered in the iPython session, while in a code editor, 
# Fri, 07 Dec 2018 21:27:28
#3 continued: the code will only run if it is commanded to
# Fri, 07 Dec 2018 21:28:06
'
# Fri, 07 Dec 2018 21:29:43
'''#4 Conclusion: Some advantages of putting code inside a function definition include saving space and time in coding a program when a specific action is done multiple times'''
#[Out]# '#4 Conclusion: Some advantages of putting code inside a function definition include saving space and time in coding a program when a specific action is done multiple times'
# Fri, 07 Dec 2018 21:30:42
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:30:58
%run 1.3.2/Jia_1.3.2.py
# Fri, 07 Dec 2018 21:32:23
#The code is a result of the code in the previously made functions; this would be the last conclusion question because it would test whether or not the code had been completed
# Fri, 07 Dec 2018 21:32:37
#with the correct understanding and with the right syntax 
# Fri, 07 Dec 2018 21:32:54
#^^^ #5 Conclusion 
# Fri, 07 Dec 2018 21:33:45
#testing comment: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
# Fri, 07 Dec 2018 21:34:24
%logstop
